#!/usr/bin/env bash
#
# Summary: Set or show the shell-specific Julia version
#
# Usage: jlenv shell <version>
#        jlenv shell -
#        jlenv shell --unset
#
# Sets a shell-specific Julia version by setting the `JLENV_VERSION'
# environment variable in your shell. This version overrides local
# application-specific versions and the global version.
#
# <version> should be a string matching a Julia version known to jlenv.
# The special version string `system' will use your default system Julia.
# Run `jlenv versions' for a list of available Julia versions.
#
# When `-` is passed instead of the version string, the previously set
# version will be restored. With `--unset`, the `JLENV_VERSION`
# environment variable gets unset, restoring the environment to the
# state before the first `jlenv shell` call.

set -e
[ -n "$JLENV_DEBUG" ] && set -x

# Provide jlenv completions
if [ "$1" = "--complete" ]; then
  echo --unset
  echo system
  exec jlenv-versions --bare
fi

version="$1"
shell="$(basename "${JLENV_SHELL:-$SHELL}")"

if [ -z "$version" ]; then
  if [ -z "$JLENV_VERSION" ]; then
    echo "jlenv: no shell-specific version configured" >&2
    exit 1
  else
    echo 'echo "$JLENV_VERSION"'
    exit
  fi
fi

if [ "$version" = "--unset" ]; then
  case "$shell" in
  fish )
    echo 'set -gu JLENV_VERSION_OLD "$JLENV_VERSION"'
    echo "set -e JLENV_VERSION"
    ;;
  * )
    echo 'JLENV_VERSION_OLD="$JLENV_VERSION"'
    echo "unset JLENV_VERSION"
    ;;
  esac
  exit
fi

if [ "$version" = "-" ]; then
  case "$shell" in
  fish )
    cat <<EOS
if set -q JLENV_VERSION_OLD
  if [ -n "\$JLENV_VERSION_OLD" ]
    set JLENV_VERSION_OLD_ "\$JLENV_VERSION"
    set -gx JLENV_VERSION "\$JLENV_VERSION_OLD"
    set -gu JLENV_VERSION_OLD "\$JLENV_VERSION_OLD_"
    set -e JLENV_VERSION_OLD_
  else
    set -gu JLENV_VERSION_OLD "\$JLENV_VERSION"
    set -e JLENV_VERSION
  end
else
  echo "jlenv: JLENV_VERSION_OLD is not set" >&2
  false
end
EOS
    ;;
  * )
    cat <<EOS
if [ -n "\${JLENV_VERSION_OLD+x}" ]; then
  if [ -n "\$JLENV_VERSION_OLD" ]; then
    JLENV_VERSION_OLD_="\$JLENV_VERSION"
    export JLENV_VERSION="\$JLENV_VERSION_OLD"
    JLENV_VERSION_OLD="\$JLENV_VERSION_OLD_"
    unset JLENV_VERSION_OLD_
  else
    JLENV_VERSION_OLD="\$JLENV_VERSION"
    unset JLENV_VERSION
  fi
else
  echo "jlenv: JLENV_VERSION_OLD is not set" >&2
  false
fi
EOS
    ;;
  esac
  exit
fi

# Make sure the specified version is installed.
if jlenv-prefix "$version" >/dev/null; then
  if [ "$version" != "$JLENV_VERSION" ]; then
    case "$shell" in
    fish )
      echo 'set -gu JLENV_VERSION_OLD "$JLENV_VERSION"'
      echo "set -gx JLENV_VERSION \"$version\""
      ;;
    * )
      echo 'JLENV_VERSION_OLD="$JLENV_VERSION"'
      echo "export JLENV_VERSION=\"$version\""
      ;;
    esac
  fi
else
  echo "false"
  exit 1
fi
